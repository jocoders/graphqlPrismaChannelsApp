type AggregateChannel {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateRefreshToken {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Channel {
  id: ID!
  createdAt: DateTime!
  title: String!
  cover: String!
  stars: Int
  creator: User!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
}

type ChannelConnection {
  pageInfo: PageInfo!
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  id: ID
  title: String!
  cover: String!
  stars: Int
  creator: UserCreateOneWithoutChannelsInput!
  topics: TopicCreateManyWithoutChannelInput
}

input ChannelCreateManyWithoutCreatorInput {
  create: [ChannelCreateWithoutCreatorInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateOneWithoutTopicsInput {
  create: ChannelCreateWithoutTopicsInput
  connect: ChannelWhereUniqueInput
}

input ChannelCreateWithoutCreatorInput {
  id: ID
  title: String!
  cover: String!
  stars: Int
  topics: TopicCreateManyWithoutChannelInput
}

input ChannelCreateWithoutTopicsInput {
  id: ID
  title: String!
  cover: String!
  stars: Int
  creator: UserCreateOneWithoutChannelsInput!
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

enum ChannelOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  cover_ASC
  cover_DESC
  stars_ASC
  stars_DESC
}

type ChannelPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  cover: String!
  stars: Int
}

input ChannelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  cover: String
  cover_not: String
  cover_in: [String!]
  cover_not_in: [String!]
  cover_lt: String
  cover_lte: String
  cover_gt: String
  cover_gte: String
  cover_contains: String
  cover_not_contains: String
  cover_starts_with: String
  cover_not_starts_with: String
  cover_ends_with: String
  cover_not_ends_with: String
  stars: Int
  stars_not: Int
  stars_in: [Int!]
  stars_not_in: [Int!]
  stars_lt: Int
  stars_lte: Int
  stars_gt: Int
  stars_gte: Int
  AND: [ChannelScalarWhereInput!]
  OR: [ChannelScalarWhereInput!]
  NOT: [ChannelScalarWhereInput!]
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
  AND: [ChannelSubscriptionWhereInput!]
  OR: [ChannelSubscriptionWhereInput!]
  NOT: [ChannelSubscriptionWhereInput!]
}

input ChannelUpdateInput {
  title: String
  cover: String
  stars: Int
  creator: UserUpdateOneRequiredWithoutChannelsInput
  topics: TopicUpdateManyWithoutChannelInput
}

input ChannelUpdateManyDataInput {
  title: String
  cover: String
  stars: Int
}

input ChannelUpdateManyMutationInput {
  title: String
  cover: String
  stars: Int
}

input ChannelUpdateManyWithoutCreatorInput {
  create: [ChannelCreateWithoutCreatorInput!]
  delete: [ChannelWhereUniqueInput!]
  connect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [ChannelScalarWhereInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
}

input ChannelUpdateManyWithWhereNestedInput {
  where: ChannelScalarWhereInput!
  data: ChannelUpdateManyDataInput!
}

input ChannelUpdateOneRequiredWithoutTopicsInput {
  create: ChannelCreateWithoutTopicsInput
  update: ChannelUpdateWithoutTopicsDataInput
  upsert: ChannelUpsertWithoutTopicsInput
  connect: ChannelWhereUniqueInput
}

input ChannelUpdateWithoutCreatorDataInput {
  title: String
  cover: String
  stars: Int
  topics: TopicUpdateManyWithoutChannelInput
}

input ChannelUpdateWithoutTopicsDataInput {
  title: String
  cover: String
  stars: Int
  creator: UserUpdateOneRequiredWithoutChannelsInput
}

input ChannelUpdateWithWhereUniqueWithoutCreatorInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutCreatorDataInput!
}

input ChannelUpsertWithoutTopicsInput {
  update: ChannelUpdateWithoutTopicsDataInput!
  create: ChannelCreateWithoutTopicsInput!
}

input ChannelUpsertWithWhereUniqueWithoutCreatorInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutCreatorDataInput!
  create: ChannelCreateWithoutCreatorInput!
}

input ChannelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  cover: String
  cover_not: String
  cover_in: [String!]
  cover_not_in: [String!]
  cover_lt: String
  cover_lte: String
  cover_gt: String
  cover_gte: String
  cover_contains: String
  cover_not_contains: String
  cover_starts_with: String
  cover_not_starts_with: String
  cover_ends_with: String
  cover_not_ends_with: String
  stars: Int
  stars_not: Int
  stars_in: [Int!]
  stars_not_in: [Int!]
  stars_lt: Int
  stars_lte: Int
  stars_gt: Int
  stars_gte: Int
  creator: UserWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
}

input ChannelWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  text: String!
  createdAt: DateTime!
  creator: User!
  topic: Topic!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  text: String!
  creator: UserCreateOneWithoutMessagesInput!
  topic: TopicCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutCreatorInput {
  create: [MessageCreateWithoutCreatorInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutTopicInput {
  create: [MessageCreateWithoutTopicInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutCreatorInput {
  id: ID
  text: String!
  topic: TopicCreateOneWithoutMessagesInput!
}

input MessageCreateWithoutTopicInput {
  id: ID
  text: String!
  creator: UserCreateOneWithoutMessagesInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  text: String
  creator: UserUpdateOneRequiredWithoutMessagesInput
  topic: TopicUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  text: String
}

input MessageUpdateManyMutationInput {
  text: String
}

input MessageUpdateManyWithoutCreatorInput {
  create: [MessageCreateWithoutCreatorInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutTopicInput {
  create: [MessageCreateWithoutTopicInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutCreatorDataInput {
  text: String
  topic: TopicUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateWithoutTopicDataInput {
  text: String
  creator: UserUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutCreatorInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutCreatorDataInput!
}

input MessageUpdateWithWhereUniqueWithoutTopicInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutTopicDataInput!
}

input MessageUpsertWithWhereUniqueWithoutCreatorInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutCreatorDataInput!
  create: MessageCreateWithoutCreatorInput!
}

input MessageUpsertWithWhereUniqueWithoutTopicInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutTopicDataInput!
  create: MessageCreateWithoutTopicInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  creator: UserWhereInput
  topic: TopicWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createChannel(data: ChannelCreateInput!): Channel!
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  updateManyChannels(data: ChannelUpdateManyMutationInput!, where: ChannelWhereInput): BatchPayload!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteManyChannels(where: ChannelWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createRefreshToken(data: RefreshTokenCreateInput!): RefreshToken!
  updateRefreshToken(data: RefreshTokenUpdateInput!, where: RefreshTokenWhereUniqueInput!): RefreshToken
  updateManyRefreshTokens(data: RefreshTokenUpdateManyMutationInput!, where: RefreshTokenWhereInput): BatchPayload!
  upsertRefreshToken(where: RefreshTokenWhereUniqueInput!, create: RefreshTokenCreateInput!, update: RefreshTokenUpdateInput!): RefreshToken!
  deleteRefreshToken(where: RefreshTokenWhereUniqueInput!): RefreshToken
  deleteManyRefreshTokens(where: RefreshTokenWhereInput): BatchPayload!
  createTopic(data: TopicCreateInput!): Topic!
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  channel(where: ChannelWhereUniqueInput!): Channel
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  refreshToken(where: RefreshTokenWhereUniqueInput!): RefreshToken
  refreshTokens(where: RefreshTokenWhereInput, orderBy: RefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RefreshToken]!
  refreshTokensConnection(where: RefreshTokenWhereInput, orderBy: RefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RefreshTokenConnection!
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type RefreshToken {
  id: ID!
  token: String!
  owner: User!
}

type RefreshTokenConnection {
  pageInfo: PageInfo!
  edges: [RefreshTokenEdge]!
  aggregate: AggregateRefreshToken!
}

input RefreshTokenCreateInput {
  id: ID
  token: String!
  owner: UserCreateOneWithoutRefreshTokensInput!
}

input RefreshTokenCreateManyWithoutOwnerInput {
  create: [RefreshTokenCreateWithoutOwnerInput!]
  connect: [RefreshTokenWhereUniqueInput!]
}

input RefreshTokenCreateWithoutOwnerInput {
  id: ID
  token: String!
}

type RefreshTokenEdge {
  node: RefreshToken!
  cursor: String!
}

enum RefreshTokenOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
}

type RefreshTokenPreviousValues {
  id: ID!
  token: String!
}

input RefreshTokenScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  AND: [RefreshTokenScalarWhereInput!]
  OR: [RefreshTokenScalarWhereInput!]
  NOT: [RefreshTokenScalarWhereInput!]
}

type RefreshTokenSubscriptionPayload {
  mutation: MutationType!
  node: RefreshToken
  updatedFields: [String!]
  previousValues: RefreshTokenPreviousValues
}

input RefreshTokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RefreshTokenWhereInput
  AND: [RefreshTokenSubscriptionWhereInput!]
  OR: [RefreshTokenSubscriptionWhereInput!]
  NOT: [RefreshTokenSubscriptionWhereInput!]
}

input RefreshTokenUpdateInput {
  token: String
  owner: UserUpdateOneRequiredWithoutRefreshTokensInput
}

input RefreshTokenUpdateManyDataInput {
  token: String
}

input RefreshTokenUpdateManyMutationInput {
  token: String
}

input RefreshTokenUpdateManyWithoutOwnerInput {
  create: [RefreshTokenCreateWithoutOwnerInput!]
  delete: [RefreshTokenWhereUniqueInput!]
  connect: [RefreshTokenWhereUniqueInput!]
  set: [RefreshTokenWhereUniqueInput!]
  disconnect: [RefreshTokenWhereUniqueInput!]
  update: [RefreshTokenUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [RefreshTokenUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [RefreshTokenScalarWhereInput!]
  updateMany: [RefreshTokenUpdateManyWithWhereNestedInput!]
}

input RefreshTokenUpdateManyWithWhereNestedInput {
  where: RefreshTokenScalarWhereInput!
  data: RefreshTokenUpdateManyDataInput!
}

input RefreshTokenUpdateWithoutOwnerDataInput {
  token: String
}

input RefreshTokenUpdateWithWhereUniqueWithoutOwnerInput {
  where: RefreshTokenWhereUniqueInput!
  data: RefreshTokenUpdateWithoutOwnerDataInput!
}

input RefreshTokenUpsertWithWhereUniqueWithoutOwnerInput {
  where: RefreshTokenWhereUniqueInput!
  update: RefreshTokenUpdateWithoutOwnerDataInput!
  create: RefreshTokenCreateWithoutOwnerInput!
}

input RefreshTokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  owner: UserWhereInput
  AND: [RefreshTokenWhereInput!]
  OR: [RefreshTokenWhereInput!]
  NOT: [RefreshTokenWhereInput!]
}

input RefreshTokenWhereUniqueInput {
  id: ID
}

type Subscription {
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  refreshToken(where: RefreshTokenSubscriptionWhereInput): RefreshTokenSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Topic {
  id: ID!
  createdAt: DateTime!
  title: String!
  stars: Int
  avatar: String!
  creator: User!
  channel: Channel!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  title: String!
  stars: Int
  avatar: String!
  creator: UserCreateOneWithoutTopicsInput!
  channel: ChannelCreateOneWithoutTopicsInput!
  messages: MessageCreateManyWithoutTopicInput
}

input TopicCreateManyWithoutChannelInput {
  create: [TopicCreateWithoutChannelInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutCreatorInput {
  create: [TopicCreateWithoutCreatorInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateOneWithoutMessagesInput {
  create: TopicCreateWithoutMessagesInput
  connect: TopicWhereUniqueInput
}

input TopicCreateWithoutChannelInput {
  id: ID
  title: String!
  stars: Int
  avatar: String!
  creator: UserCreateOneWithoutTopicsInput!
  messages: MessageCreateManyWithoutTopicInput
}

input TopicCreateWithoutCreatorInput {
  id: ID
  title: String!
  stars: Int
  avatar: String!
  channel: ChannelCreateOneWithoutTopicsInput!
  messages: MessageCreateManyWithoutTopicInput
}

input TopicCreateWithoutMessagesInput {
  id: ID
  title: String!
  stars: Int
  avatar: String!
  creator: UserCreateOneWithoutTopicsInput!
  channel: ChannelCreateOneWithoutTopicsInput!
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  stars_ASC
  stars_DESC
  avatar_ASC
  avatar_DESC
}

type TopicPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  stars: Int
  avatar: String!
}

input TopicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  stars: Int
  stars_not: Int
  stars_in: [Int!]
  stars_not_in: [Int!]
  stars_lt: Int
  stars_lte: Int
  stars_gt: Int
  stars_gte: Int
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  AND: [TopicScalarWhereInput!]
  OR: [TopicScalarWhereInput!]
  NOT: [TopicScalarWhereInput!]
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
  AND: [TopicSubscriptionWhereInput!]
  OR: [TopicSubscriptionWhereInput!]
  NOT: [TopicSubscriptionWhereInput!]
}

input TopicUpdateInput {
  title: String
  stars: Int
  avatar: String
  creator: UserUpdateOneRequiredWithoutTopicsInput
  channel: ChannelUpdateOneRequiredWithoutTopicsInput
  messages: MessageUpdateManyWithoutTopicInput
}

input TopicUpdateManyDataInput {
  title: String
  stars: Int
  avatar: String
}

input TopicUpdateManyMutationInput {
  title: String
  stars: Int
  avatar: String
}

input TopicUpdateManyWithoutChannelInput {
  create: [TopicCreateWithoutChannelInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutChannelInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutChannelInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutCreatorInput {
  create: [TopicCreateWithoutCreatorInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateOneRequiredWithoutMessagesInput {
  create: TopicCreateWithoutMessagesInput
  update: TopicUpdateWithoutMessagesDataInput
  upsert: TopicUpsertWithoutMessagesInput
  connect: TopicWhereUniqueInput
}

input TopicUpdateWithoutChannelDataInput {
  title: String
  stars: Int
  avatar: String
  creator: UserUpdateOneRequiredWithoutTopicsInput
  messages: MessageUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutCreatorDataInput {
  title: String
  stars: Int
  avatar: String
  channel: ChannelUpdateOneRequiredWithoutTopicsInput
  messages: MessageUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutMessagesDataInput {
  title: String
  stars: Int
  avatar: String
  creator: UserUpdateOneRequiredWithoutTopicsInput
  channel: ChannelUpdateOneRequiredWithoutTopicsInput
}

input TopicUpdateWithWhereUniqueWithoutChannelInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutChannelDataInput!
}

input TopicUpdateWithWhereUniqueWithoutCreatorInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutCreatorDataInput!
}

input TopicUpsertWithoutMessagesInput {
  update: TopicUpdateWithoutMessagesDataInput!
  create: TopicCreateWithoutMessagesInput!
}

input TopicUpsertWithWhereUniqueWithoutChannelInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutChannelDataInput!
  create: TopicCreateWithoutChannelInput!
}

input TopicUpsertWithWhereUniqueWithoutCreatorInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutCreatorDataInput!
  create: TopicCreateWithoutCreatorInput!
}

input TopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  stars: Int
  stars_not: Int
  stars_in: [Int!]
  stars_not_in: [Int!]
  stars_lt: Int
  stars_lte: Int
  stars_gt: Int
  stars_gte: Int
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  creator: UserWhereInput
  channel: ChannelWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  name: String
  email: String
  stars: Int
  phone: String!
  cover: String
  avatar: String
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  refreshTokens(where: RefreshTokenWhereInput, orderBy: RefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RefreshToken!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String
  stars: Int
  phone: String!
  cover: String
  avatar: String
  channels: ChannelCreateManyWithoutCreatorInput
  topics: TopicCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutCreatorInput
  refreshTokens: RefreshTokenCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutChannelsInput {
  create: UserCreateWithoutChannelsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRefreshTokensInput {
  create: UserCreateWithoutRefreshTokensInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChannelsInput {
  id: ID
  name: String
  email: String
  stars: Int
  phone: String!
  cover: String
  avatar: String
  topics: TopicCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutCreatorInput
  refreshTokens: RefreshTokenCreateManyWithoutOwnerInput
}

input UserCreateWithoutMessagesInput {
  id: ID
  name: String
  email: String
  stars: Int
  phone: String!
  cover: String
  avatar: String
  channels: ChannelCreateManyWithoutCreatorInput
  topics: TopicCreateManyWithoutCreatorInput
  refreshTokens: RefreshTokenCreateManyWithoutOwnerInput
}

input UserCreateWithoutRefreshTokensInput {
  id: ID
  name: String
  email: String
  stars: Int
  phone: String!
  cover: String
  avatar: String
  channels: ChannelCreateManyWithoutCreatorInput
  topics: TopicCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutCreatorInput
}

input UserCreateWithoutTopicsInput {
  id: ID
  name: String
  email: String
  stars: Int
  phone: String!
  cover: String
  avatar: String
  channels: ChannelCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutCreatorInput
  refreshTokens: RefreshTokenCreateManyWithoutOwnerInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  stars_ASC
  stars_DESC
  phone_ASC
  phone_DESC
  cover_ASC
  cover_DESC
  avatar_ASC
  avatar_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String
  email: String
  stars: Int
  phone: String!
  cover: String
  avatar: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  stars: Int
  phone: String
  cover: String
  avatar: String
  channels: ChannelUpdateManyWithoutCreatorInput
  topics: TopicUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutCreatorInput
  refreshTokens: RefreshTokenUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  stars: Int
  phone: String
  cover: String
  avatar: String
}

input UserUpdateOneRequiredWithoutChannelsInput {
  create: UserCreateWithoutChannelsInput
  update: UserUpdateWithoutChannelsDataInput
  upsert: UserUpsertWithoutChannelsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRefreshTokensInput {
  create: UserCreateWithoutRefreshTokensInput
  update: UserUpdateWithoutRefreshTokensDataInput
  upsert: UserUpsertWithoutRefreshTokensInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  update: UserUpdateWithoutTopicsDataInput
  upsert: UserUpsertWithoutTopicsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutChannelsDataInput {
  name: String
  email: String
  stars: Int
  phone: String
  cover: String
  avatar: String
  topics: TopicUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutCreatorInput
  refreshTokens: RefreshTokenUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutMessagesDataInput {
  name: String
  email: String
  stars: Int
  phone: String
  cover: String
  avatar: String
  channels: ChannelUpdateManyWithoutCreatorInput
  topics: TopicUpdateManyWithoutCreatorInput
  refreshTokens: RefreshTokenUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutRefreshTokensDataInput {
  name: String
  email: String
  stars: Int
  phone: String
  cover: String
  avatar: String
  channels: ChannelUpdateManyWithoutCreatorInput
  topics: TopicUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutTopicsDataInput {
  name: String
  email: String
  stars: Int
  phone: String
  cover: String
  avatar: String
  channels: ChannelUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutCreatorInput
  refreshTokens: RefreshTokenUpdateManyWithoutOwnerInput
}

input UserUpsertWithoutChannelsInput {
  update: UserUpdateWithoutChannelsDataInput!
  create: UserCreateWithoutChannelsInput!
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithoutRefreshTokensInput {
  update: UserUpdateWithoutRefreshTokensDataInput!
  create: UserCreateWithoutRefreshTokensInput!
}

input UserUpsertWithoutTopicsInput {
  update: UserUpdateWithoutTopicsDataInput!
  create: UserCreateWithoutTopicsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  stars: Int
  stars_not: Int
  stars_in: [Int!]
  stars_not_in: [Int!]
  stars_lt: Int
  stars_lte: Int
  stars_gt: Int
  stars_gte: Int
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  cover: String
  cover_not: String
  cover_in: [String!]
  cover_not_in: [String!]
  cover_lt: String
  cover_lte: String
  cover_gt: String
  cover_gte: String
  cover_contains: String
  cover_not_contains: String
  cover_starts_with: String
  cover_not_starts_with: String
  cover_ends_with: String
  cover_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  channels_every: ChannelWhereInput
  channels_some: ChannelWhereInput
  channels_none: ChannelWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  refreshTokens_every: RefreshTokenWhereInput
  refreshTokens_some: RefreshTokenWhereInput
  refreshTokens_none: RefreshTokenWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  phone: String
}
