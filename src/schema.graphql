scalar DateTime

enum MutationType {
    CREATED
    DELETED
    UPDATED
}

input CreateAccessTokenInput {
  refreshTokenId: String!
  userId: String!
}

input CreateChannelInput {
    cover: String!
    title: String!
}

input CreateMessageInput {
  text: String!
  topic: ID!
}

input CreateTopicInput {
  avatar: String!
  channel: ID!
  title: String!
}

input CreateUserInput {
    email: String
    name: String
    phone: String!
}

input UpdateChannelInput {
    cover: String
    title: String
}

input UpdateMessageInput {
  text: String!
}

input UpdateTopicInput {
  avatar: String
  title: String
}

input UpdateUserInput {
    avatar: String 
    cover: String
    email: String
    name: String
    phone: String
    stars: Int
}

type AuthPayload {
    accessToken: String!
    refreshToken: String! 
    user: User!
}

type Channel {
    id: ID!
    cover: String!
    creator: User!
    createdAt: DateTime! 
    stars: Int
    title: String!
    topics: [Topic!]!
}

type ChannelSubscriptionPayload {
    mutation: MutationType!
    node: Channel 
}

type Message {
  creator: User!
  createdAt: DateTime! 
  id: ID!
  text: String!
  topic: Topic!
}

type Mutation {
    createChannel(data: CreateChannelInput!): Channel!
    createMessage(data: CreateMessageInput!): Message!
    createRefreshToken(userId: String!): RefreshToken!
    createTopic(data: CreateTopicInput!): Topic!
    createUser(data: CreateUserInput!): AuthPayload!

    deleteChannel(id: ID!): Channel!
    deleteMessage(id: ID!): Message!
    deleteTopic(id: ID!): Topic!
    deleteUser: User!

    signIn(code: String!): AuthPayload!
    signOut(refreshToken: String!, refreshTokenId: String!): SignOutPayload! 

    updateChannel(id: ID!, data: UpdateChannelInput!): Channel!
    updateMessage(id: ID!, data: UpdateMessageInput!): Message!
    updateTokens(refreshToken: String!, refreshTokenId: String!): AuthPayload!
    updateTopic(id: ID!, data: UpdateTopicInput!): Topic!
    updateUser(data: UpdateUserInput!): User!
}

type Query {
    channel(id: ID!): Channel!
    channels(query: String): [Channel!]!

    me: User!
    myChannels(query: String): [Channel!]!
    myTopics(query: String): [Topic!]!

    topics: [Topic!]!

    user(query: String): User!
    users(query: String): [User!]!
}

type RefreshToken {
  id: ID!
  owner: User!
  token: String!
}

type SignOutPayload {
  signedOut: Boolean!
  user: User!
}

type Subscription {
    channel: ChannelSubscriptionPayload!
    myChannel: ChannelSubscriptionPayload!
    topic(channelId: ID!): TopicSubscriptionPayload!
}

type Topic {
    avatar: String!
    channel: Channel!
    createdAt: DateTime! 
    creator: User!
    id: ID!
    messages: [Message!]!
    stars: Int
    title: String!
}

type TopicSubscriptionPayload {
    mutation: MutationType!
    node: Topic
}

type User {
    avatar: String 
    channels: [Channel!]!
    cover: String 
    createdAt: DateTime! 
    email: String
    id: ID!
    messages: [Message!]!
    name: String
    phone: String! 
    refreshTokens: [RefreshToken!]!
    stars: Int
    topics: [Topic!]!
}
