type Query {
    users(query: String): [User!]!
    user(query: String): User!
    posts(query: String): [Post!]!
    myPosts(query: String): [Post!]!
    comments: [Comment!]!
    me: User!
    post(id: ID!): Post!
}

type Mutation {
    signIn(code: String!): AuthPayload!
    updateTokens(data: UpdateTokensInput!): AuthPayload!
    createUser(data: CreateUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createRefreshToken(userPhone: String!): RefreshToken!
    #createRefreshToken(userId: String!): RefreshToken!
    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type User {
    id: ID!
    refreshTokens: [RefreshToken!]!
    name: String
    phone: String! 
    email: String
    posts: [Post!]!
    comments: [Comment!]!
}

type AuthPayload {
    user: User!
    accessToken: String!
    refreshToken: String! 
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}

input CreateUserInput {
    name: String
    email: String
    phone: String!
}

input UpdateTokensInput {
    accessToken: String!    
    refreshToken: String!
}

input CreateAccessTokenInput {
  userId: String!
  refreshTokenId: String!
}

input UpdateUserInput {
    name: String
    email: String
    phone: String
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input UpdateCommentInput {
    text: String
}


type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type RefreshToken {
  id: ID!
  token: String!
  owner: User!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}


type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}
